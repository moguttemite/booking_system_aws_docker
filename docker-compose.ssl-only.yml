services:
  database:
    image: postgres:15-alpine
    container_name: booking_database_ssl
    restart: unless-stopped
    environment:
      POSTGRES_DB: lecture_booking
      POSTGRES_USER: lecture_admin
      POSTGRES_PASSWORD: postgresroot
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_ssl:/var/lib/postgresql/data
      - ./database/initdb:/docker-entrypoint-initdb.d:ro
    expose:
      - "5432"
    networks:
      - backend_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lecture_admin -d lecture_booking"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: booking_backend_ssl
    restart: unless-stopped
    environment:
      POSTGRES_SERVER: database
      POSTGRES_PORT: 5432
      POSTGRES_USER: lecture_admin
      POSTGRES_PASSWORD: postgresroot
      POSTGRES_DB: lecture_booking
      SECRET_KEY: dev-change-me-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      FIRST_SUPERUSER: admin@example.com
      FIRST_SUPERUSER_PASSWORD: Admin#12345
      CORS_ORIGINS: https://localhost,http://localhost
    depends_on:
      database:
        condition: service_healthy
    expose:
      - "8000"
    networks:
      - backend_net
      - public_net
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; urllib.request.urlopen('http://localhost:8000/health',timeout=5); sys.exit(0)\""]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: booking_frontend_ssl
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE_URL: /api
    depends_on:
      backend:
        condition: service_healthy
    expose:
      - "3000"
    networks:
      - public_net
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000', r => process.exit(r.statusCode===200?0:1)).on('error', ()=>process.exit(1))\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: booking_proxy_ssl
    restart: unless-stopped
    environment:
      NGINX_LOG_LEVEL: info
      FRONTEND_HOST: frontend
      FRONTEND_PORT: 3000
      BACKEND_HOST: backend
      BACKEND_PORT: 8000
      DOMAIN_NAME: localhost
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl_certs:/etc/nginx/ssl
    networks:
      - public_net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  certbot:
    image: certbot/certbot
    container_name: booking_certbot_ssl
    volumes:
      - ./ssl_certs:/etc/letsencrypt
    command: sh -c "echo 'SSL证书将在首次启动时生成' && sleep infinity"
    networks:
      - public_net

networks:
  backend_net:
    driver: bridge
    internal: true
  public_net:
    driver: bridge
    internal: false

volumes:
  postgres_data_ssl:
    driver: local
