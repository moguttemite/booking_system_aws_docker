version: '3.8'

services:
  # 数据库服务
  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: booking_database_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: lecture_booking
      POSTGRES_USER: lecture_admin
      POSTGRES_PASSWORD: postgresroot
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      # 按官方建议把卷挂到 /var/lib/postgresql/data
      - postgres_data_dev:/var/lib/postgresql/data
      # 初始化脚本只在空数据目录时执行；只读挂载更安全
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"  # 开发环境暴露数据库端口用于调试
    networks:
      - backend_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lecture_admin -d lecture_booking"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: booking_backend_dev
    environment:
      POSTGRES_SERVER: database
      POSTGRES_PORT: 5432
      POSTGRES_USER: lecture_admin
      POSTGRES_PASSWORD: postgresroot
      POSTGRES_DB: lecture_booking
      SECRET_KEY: your-secret-key-here-change-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      FIRST_SUPERUSER: admin@example.com
      FIRST_SUPERUSER_PASSWORD: admin123
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "8000:8000"  # 开发环境暴露后端端口用于调试
    networks:
      - backend_net
      - public_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: booking_frontend_dev
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_BASE_URL: /api  # 开发环境通过代理访问
    depends_on:
      - backend
    ports:
      - "3000:3000"  # 开发环境暴露前端端口用于调试
    networks:
      - public_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx代理服务
  proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: booking_proxy_dev
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    networks:
      - public_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 --spider http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# 网络配置
networks:
  backend_net:
    driver: bridge
    internal: false  # 允许访问外部网络（用于拉取镜像等）
  public_net:
    driver: bridge
    internal: false  # 允许访问外部网络

# 数据卷配置
volumes:
  postgres_data_dev:
    driver: local
