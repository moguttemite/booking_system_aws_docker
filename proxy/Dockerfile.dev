# 开发环境Dockerfile
FROM nginx:alpine

# 设置环境变量
ENV NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
ENV NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d

# 安装开发工具
RUN apk add --no-cache \
    wget \
    curl \
    gettext \
    netcat-openbsd \
    bash \
    && rm -rf /var/cache/apk/*

# 创建必要的目录
RUN mkdir -p /var/log/nginx \
    && mkdir -p /etc/nginx/templates \
    && mkdir -p /etc/nginx/conf.d \
    && mkdir -p /usr/share/nginx/html

# 复制Nginx配置文件
COPY nginx.conf /etc/nginx/nginx.conf

# 复制配置模板
COPY nginx.conf.template /etc/nginx/templates/nginx.conf.template

# 复制自定义错误页面
COPY error-pages/ /usr/share/nginx/html/

# 设置权限
RUN chown -R nginx:nginx /var/log/nginx \
    && chown -R nginx:nginx /usr/share/nginx/html \
    && chmod -R 755 /usr/share/nginx/html

# 创建非root用户运行脚本
RUN addgroup -g 1001 -S nginx-proxy \
    && adduser -u 1001 -S nginx-proxy -G nginx-proxy

# 暴露端口
EXPOSE 80
EXPOSE 443

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/health || exit 1

# 启动脚本
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# 使用非root用户
USER nginx

# 启动Nginx
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]
